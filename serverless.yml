service: mirror-collective-python-api
frameworkVersion: '>=3.38.0 <4.0.0'

provider:
  name: aws
  runtime: python3.12
  region: us-east-1
  stage: ${env:STAGE, 'staging'}
  memorySize: 512
  timeout: 30
  environment:
    ALLOWED_ORIGINS: ${env:ALLOWED_ORIGINS, 'http://localhost:3000'}
    COGNITO_USER_POOL_ID: ${env:COGNITO_USER_POOL_ID, ''}
    COGNITO_CLIENT_ID: ${env:COGNITO_CLIENT_ID, ''}
    COGNITO_CLIENT_SECRET: ${env:COGNITO_CLIENT_SECRET, ''}
    RATE_LIMIT_WINDOW_SECONDS: ${env:RATE_LIMIT_WINDOW_SECONDS, 900}
    RATE_LIMIT_MAX_REQUESTS: ${env:RATE_LIMIT_MAX_REQUESTS, 100}
    OPENAI_API_KEY: ${env:OPENAI_API_KEY, ''}
    DYNAMODB_USERS_TABLE: ${self:service}-users-${self:provider.stage}
    DYNAMODB_ACTIVITY_TABLE: ${self:service}-activity-${self:provider.stage}
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
            - dynamodb:DescribeTable
          Resource:
            - Fn::GetAtt: [ UsersTable, Arn ]
            - Fn::Join:
              - '/'
              - - Fn::GetAtt: [ UsersTable, Arn ]
                - 'index/*'
            - Fn::GetAtt: [ ActivityTable, Arn ]
        - Effect: Allow
          Action:
            - cognito-idp:GetUser
            - cognito-idp:AdminGetUser
            - cognito-idp:AdminInitiateAuth
            - cognito-idp:AdminDeleteUser
            - cognito-idp:DescribeUserPool
            - cognito-idp:DescribeUserPoolClient
            - cognito-idp:SignUp
            - cognito-idp:ConfirmSignUp
            - cognito-idp:ResendConfirmationCode
            - cognito-idp:ForgotPassword
            - cognito-idp:ConfirmForgotPassword
            - cognito-idp:InitiateAuth
            - cognito-idp:DeleteUser
            - cognito-idp:GlobalSignOut
          Resource:
            - arn:aws:cognito-idp:${self:provider.region}:*:userpool/*
  logs:
    http: true

functions:
  api:
    handler: src/app/handler.handler
    events:
      - httpApi: '*'

resources:
  Resources:
    UsersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:service}-users-${self:provider.stage}
        AttributeDefinitions:
          - AttributeName: user_id
            AttributeType: S
          - AttributeName: email
            AttributeType: S
        KeySchema:
          - AttributeName: user_id
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: email-index
            KeySchema:
              - AttributeName: email
                KeyType: HASH
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1
        BillingMode: PROVISIONED
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    
    ActivityTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:service}-activity-${self:provider.stage}
        AttributeDefinitions:
          - AttributeName: user_id
            AttributeType: S
          - AttributeName: activity_date
            AttributeType: S
        KeySchema:
          - AttributeName: user_id
            KeyType: HASH
          - AttributeName: activity_date
            KeyType: RANGE
        BillingMode: PROVISIONED
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1

plugins:
  - serverless-python-requirements

custom:
  pythonRequirements:
    slim: false
    layer: false
    dockerizePip: true
    dockerImage: public.ecr.aws/sam/build-python3.12:latest
    pipCmdExtraArgs:
      - --no-cache-dir

package:
  patterns:
    - '!**/*'
    - 'src/**'
    - 'requirements.txt'